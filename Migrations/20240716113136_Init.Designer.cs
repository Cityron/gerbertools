// <auto-generated />
using System;
using GerberBackend.Core.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GerberBackend.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20240716113136_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GerberBackend.Core.Entities.Auth.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecondName")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("GerberBackend.Core.Entities.Gerber.Elements.AngleChamfer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Identity")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AngleChamfers");
                });

            modelBuilder.Entity("GerberBackend.Core.Entities.Gerber.Elements.BaseMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Identity")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BaseMaterials");
                });

            modelBuilder.Entity("GerberBackend.Core.Entities.Gerber.Elements.BoardThickness", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Identity")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BoardThickness");
                });

            modelBuilder.Entity("GerberBackend.Core.Entities.Gerber.Elements.ContourMachining", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Identity")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ContourMachinings");
                });

            modelBuilder.Entity("GerberBackend.Core.Entities.Gerber.Elements.DataNumbering", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Identity")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DataNumberings");
                });

            modelBuilder.Entity("GerberBackend.Core.Entities.Gerber.Elements.DrillFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Identity")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DrillFiles");
                });

            modelBuilder.Entity("GerberBackend.Core.Entities.Gerber.Elements.EdgeConnectors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Identity")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EdgeConnectors");
                });

            modelBuilder.Entity("GerberBackend.Core.Entities.Gerber.Elements.FoilThickness", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Identity")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FoilThicknesses");
                });

            modelBuilder.Entity("GerberBackend.Core.Entities.Gerber.Elements.GerberFileBinary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Data")
                        .HasColumnType("bytea");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("GerberFileBinaries");
                });

            modelBuilder.Entity("GerberBackend.Core.Entities.Gerber.Elements.Layer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Identity")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Layers");
                });

            modelBuilder.Entity("GerberBackend.Core.Entities.Gerber.Elements.MainSites", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Identity")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MainSites");
                });

            modelBuilder.Entity("GerberBackend.Core.Entities.Gerber.Elements.MarkingColor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Identity")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MarkingColors");
                });

            modelBuilder.Entity("GerberBackend.Core.Entities.Gerber.Elements.MarkingSide", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Identity")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MarkingSides");
                });

            modelBuilder.Entity("GerberBackend.Core.Entities.Gerber.Elements.MaskColor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Identity")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MaskColors");
                });

            modelBuilder.Entity("GerberBackend.Core.Entities.Gerber.Elements.MaskSide", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Identity")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MaskSides");
                });

            modelBuilder.Entity("GerberBackend.Core.Entities.Gerber.Elements.MaskType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Identity")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MaskTypes");
                });

            modelBuilder.Entity("GerberBackend.Core.Entities.Gerber.Elements.MinimalConductor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Identity")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MinimalConductors");
                });

            modelBuilder.Entity("GerberBackend.Core.Entities.Gerber.Elements.Vias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Identity")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Vias");
                });

            modelBuilder.Entity("GerberBackend.Core.Entities.Gerber.OrderGerber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AngleChamferId")
                        .HasColumnType("integer");

                    b.Property<int>("BaseMaterialId")
                        .HasColumnType("integer");

                    b.Property<int>("BoardThicknessId")
                        .HasColumnType("integer");

                    b.Property<int>("ContourMachiningId")
                        .HasColumnType("integer");

                    b.Property<int>("DataNumberingId")
                        .HasColumnType("integer");

                    b.Property<int>("DrillFileId")
                        .HasColumnType("integer");

                    b.Property<int>("EdgeConnectorId")
                        .HasColumnType("integer");

                    b.Property<int>("FoilThicknessId")
                        .HasColumnType("integer");

                    b.Property<int>("GerberFileId")
                        .HasColumnType("integer");

                    b.Property<int>("LayerId")
                        .HasColumnType("integer");

                    b.Property<int>("MainSitesId")
                        .HasColumnType("integer");

                    b.Property<int>("MarkingColorId")
                        .HasColumnType("integer");

                    b.Property<int>("MarkingSideId")
                        .HasColumnType("integer");

                    b.Property<int>("MaskColorId")
                        .HasColumnType("integer");

                    b.Property<int>("MaskSideId")
                        .HasColumnType("integer");

                    b.Property<int>("MaskTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("MinimalConductorId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<int>("ViasId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AngleChamferId");

                    b.HasIndex("BaseMaterialId");

                    b.HasIndex("BoardThicknessId");

                    b.HasIndex("ContourMachiningId");

                    b.HasIndex("DataNumberingId");

                    b.HasIndex("DrillFileId");

                    b.HasIndex("EdgeConnectorId");

                    b.HasIndex("FoilThicknessId");

                    b.HasIndex("GerberFileId");

                    b.HasIndex("LayerId");

                    b.HasIndex("MainSitesId");

                    b.HasIndex("MarkingColorId");

                    b.HasIndex("MarkingSideId");

                    b.HasIndex("MaskColorId");

                    b.HasIndex("MaskSideId");

                    b.HasIndex("MaskTypeId");

                    b.HasIndex("MinimalConductorId");

                    b.HasIndex("UserId");

                    b.HasIndex("ViasId");

                    b.ToTable("OrderGerber", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GerberBackend.Core.Entities.Gerber.OrderGerber", b =>
                {
                    b.HasOne("GerberBackend.Core.Entities.Gerber.Elements.AngleChamfer", "AngleChamfer")
                        .WithMany("OrderGerbers")
                        .HasForeignKey("AngleChamferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GerberBackend.Core.Entities.Gerber.Elements.BaseMaterial", "BaseMaterial")
                        .WithMany("OrderGerbers")
                        .HasForeignKey("BaseMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GerberBackend.Core.Entities.Gerber.Elements.BoardThickness", "BoardThickness")
                        .WithMany("OrderGerbers")
                        .HasForeignKey("BoardThicknessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GerberBackend.Core.Entities.Gerber.Elements.ContourMachining", "ContourMachining")
                        .WithMany("OrderGerbers")
                        .HasForeignKey("ContourMachiningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GerberBackend.Core.Entities.Gerber.Elements.DataNumbering", "DataNumbering")
                        .WithMany("OrderGerbers")
                        .HasForeignKey("DataNumberingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GerberBackend.Core.Entities.Gerber.Elements.DrillFile", "DrillFile")
                        .WithMany("OrderGerbers")
                        .HasForeignKey("DrillFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GerberBackend.Core.Entities.Gerber.Elements.EdgeConnectors", "EdgeConnectors")
                        .WithMany("OrderGerbers")
                        .HasForeignKey("EdgeConnectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GerberBackend.Core.Entities.Gerber.Elements.FoilThickness", "FoilThickness")
                        .WithMany("OrderGerbers")
                        .HasForeignKey("FoilThicknessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GerberBackend.Core.Entities.Gerber.Elements.GerberFileBinary", "GerberFileBinary")
                        .WithMany("OrderGerbers")
                        .HasForeignKey("GerberFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GerberBackend.Core.Entities.Gerber.Elements.Layer", "Layer")
                        .WithMany("OrderGerbers")
                        .HasForeignKey("LayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GerberBackend.Core.Entities.Gerber.Elements.MainSites", "MainSites")
                        .WithMany("OrderGerbers")
                        .HasForeignKey("MainSitesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GerberBackend.Core.Entities.Gerber.Elements.MarkingColor", "MarkingColor")
                        .WithMany("OrderGerbers")
                        .HasForeignKey("MarkingColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GerberBackend.Core.Entities.Gerber.Elements.MarkingSide", "MarkingSide")
                        .WithMany("OrderGerbers")
                        .HasForeignKey("MarkingSideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GerberBackend.Core.Entities.Gerber.Elements.MaskColor", "MaskColor")
                        .WithMany("OrderGerbers")
                        .HasForeignKey("MaskColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GerberBackend.Core.Entities.Gerber.Elements.MaskSide", "MaskSide")
                        .WithMany("OrderGerbers")
                        .HasForeignKey("MaskSideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GerberBackend.Core.Entities.Gerber.Elements.MaskType", "MaskType")
                        .WithMany("OrderGerbers")
                        .HasForeignKey("MaskTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GerberBackend.Core.Entities.Gerber.Elements.MinimalConductor", "MinimalConductor")
                        .WithMany("OrderGerbers")
                        .HasForeignKey("MinimalConductorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GerberBackend.Core.Entities.Auth.ApplicationUser", "User")
                        .WithMany("GerberList")
                        .HasForeignKey("UserId");

                    b.HasOne("GerberBackend.Core.Entities.Gerber.Elements.Vias", "Vias")
                        .WithMany("OrderGerbers")
                        .HasForeignKey("ViasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("GerberBackend.Core.Entities.Gerber.BoardWindow", "BoardWindow", b1 =>
                        {
                            b1.Property<int>("OrderGerberId")
                                .HasColumnType("integer");

                            b1.Property<int>("Value")
                                .HasColumnType("integer");

                            b1.HasKey("OrderGerberId");

                            b1.ToTable("OrderGerber");

                            b1.WithOwner()
                                .HasForeignKey("OrderGerberId");
                        });

                    b.OwnsOne("GerberBackend.Core.Entities.Gerber.BuildTime", "BuildTime", b1 =>
                        {
                            b1.Property<int>("OrderGerberId")
                                .HasColumnType("integer");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("OrderGerberId");

                            b1.ToTable("OrderGerber");

                            b1.WithOwner()
                                .HasForeignKey("OrderGerberId");
                        });

                    b.OwnsOne("GerberBackend.Core.Entities.Gerber.Connectors", "ConnectorsCount", b1 =>
                        {
                            b1.Property<int>("OrderGerberId")
                                .HasColumnType("integer");

                            b1.Property<int>("Value")
                                .HasColumnType("integer");

                            b1.HasKey("OrderGerberId");

                            b1.ToTable("OrderGerber");

                            b1.WithOwner()
                                .HasForeignKey("OrderGerberId");
                        });

                    b.OwnsOne("GerberBackend.Core.Entities.Gerber.Count", "Count", b1 =>
                        {
                            b1.Property<int>("OrderGerberId")
                                .HasColumnType("integer");

                            b1.Property<int>("Value")
                                .HasColumnType("integer");

                            b1.HasKey("OrderGerberId");

                            b1.ToTable("OrderGerber");

                            b1.WithOwner()
                                .HasForeignKey("OrderGerberId");
                        });

                    b.OwnsOne("GerberBackend.Core.Entities.Gerber.Lamellas", "Lamellas", b1 =>
                        {
                            b1.Property<int>("OrderGerberId")
                                .HasColumnType("integer");

                            b1.Property<int>("Value")
                                .HasColumnType("integer");

                            b1.HasKey("OrderGerberId");

                            b1.ToTable("OrderGerber");

                            b1.WithOwner()
                                .HasForeignKey("OrderGerberId");
                        });

                    b.OwnsOne("GerberBackend.Core.Entities.Gerber.Order", "Order", b1 =>
                        {
                            b1.Property<int>("OrderGerberId")
                                .HasColumnType("integer");

                            b1.Property<string>("Value")
                                .HasColumnType("text");

                            b1.HasKey("OrderGerberId");

                            b1.ToTable("OrderGerber");

                            b1.WithOwner()
                                .HasForeignKey("OrderGerberId");
                        });

                    b.OwnsOne("GerberBackend.Core.Entities.Gerber.Price", "Price", b1 =>
                        {
                            b1.Property<int>("OrderGerberId")
                                .HasColumnType("integer");

                            b1.Property<int>("Value")
                                .HasColumnType("integer");

                            b1.HasKey("OrderGerberId");

                            b1.ToTable("OrderGerber");

                            b1.WithOwner()
                                .HasForeignKey("OrderGerberId");
                        });

                    b.OwnsOne("GerberBackend.Core.Entities.Gerber.Quantity", "Quantity", b1 =>
                        {
                            b1.Property<int>("OrderGerberId")
                                .HasColumnType("integer");

                            b1.Property<int>("Value")
                                .HasColumnType("integer");

                            b1.HasKey("OrderGerberId");

                            b1.ToTable("OrderGerber");

                            b1.WithOwner()
                                .HasForeignKey("OrderGerberId");
                        });

                    b.OwnsOne("GerberBackend.Core.Entities.Gerber.Size", "Size", b1 =>
                        {
                            b1.Property<int>("OrderGerberId")
                                .HasColumnType("integer");

                            b1.Property<int>("X")
                                .HasColumnType("integer");

                            b1.Property<int>("Y")
                                .HasColumnType("integer");

                            b1.HasKey("OrderGerberId");

                            b1.ToTable("OrderGerber");

                            b1.WithOwner()
                                .HasForeignKey("OrderGerberId");
                        });

                    b.OwnsOne("GerberBackend.Core.Entities.Gerber.Status", "Status", b1 =>
                        {
                            b1.Property<int>("OrderGerberId")
                                .HasColumnType("integer");

                            b1.Property<string>("Value")
                                .HasColumnType("text");

                            b1.HasKey("OrderGerberId");

                            b1.ToTable("OrderGerber");

                            b1.WithOwner()
                                .HasForeignKey("OrderGerberId");
                        });

                    b.Navigation("AngleChamfer");

                    b.Navigation("BaseMaterial");

                    b.Navigation("BoardThickness");

                    b.Navigation("BoardWindow");

                    b.Navigation("BuildTime");

                    b.Navigation("ConnectorsCount");

                    b.Navigation("ContourMachining");

                    b.Navigation("Count");

                    b.Navigation("DataNumbering");

                    b.Navigation("DrillFile");

                    b.Navigation("EdgeConnectors");

                    b.Navigation("FoilThickness");

                    b.Navigation("GerberFileBinary");

                    b.Navigation("Lamellas");

                    b.Navigation("Layer");

                    b.Navigation("MainSites");

                    b.Navigation("MarkingColor");

                    b.Navigation("MarkingSide");

                    b.Navigation("MaskColor");

                    b.Navigation("MaskSide");

                    b.Navigation("MaskType");

                    b.Navigation("MinimalConductor");

                    b.Navigation("Order");

                    b.Navigation("Price");

                    b.Navigation("Quantity");

                    b.Navigation("Size");

                    b.Navigation("Status");

                    b.Navigation("User");

                    b.Navigation("Vias");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GerberBackend.Core.Entities.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GerberBackend.Core.Entities.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GerberBackend.Core.Entities.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GerberBackend.Core.Entities.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GerberBackend.Core.Entities.Auth.ApplicationUser", b =>
                {
                    b.Navigation("GerberList");
                });

            modelBuilder.Entity("GerberBackend.Core.Entities.Gerber.Elements.AngleChamfer", b =>
                {
                    b.Navigation("OrderGerbers");
                });

            modelBuilder.Entity("GerberBackend.Core.Entities.Gerber.Elements.BaseMaterial", b =>
                {
                    b.Navigation("OrderGerbers");
                });

            modelBuilder.Entity("GerberBackend.Core.Entities.Gerber.Elements.BoardThickness", b =>
                {
                    b.Navigation("OrderGerbers");
                });

            modelBuilder.Entity("GerberBackend.Core.Entities.Gerber.Elements.ContourMachining", b =>
                {
                    b.Navigation("OrderGerbers");
                });

            modelBuilder.Entity("GerberBackend.Core.Entities.Gerber.Elements.DataNumbering", b =>
                {
                    b.Navigation("OrderGerbers");
                });

            modelBuilder.Entity("GerberBackend.Core.Entities.Gerber.Elements.DrillFile", b =>
                {
                    b.Navigation("OrderGerbers");
                });

            modelBuilder.Entity("GerberBackend.Core.Entities.Gerber.Elements.EdgeConnectors", b =>
                {
                    b.Navigation("OrderGerbers");
                });

            modelBuilder.Entity("GerberBackend.Core.Entities.Gerber.Elements.FoilThickness", b =>
                {
                    b.Navigation("OrderGerbers");
                });

            modelBuilder.Entity("GerberBackend.Core.Entities.Gerber.Elements.GerberFileBinary", b =>
                {
                    b.Navigation("OrderGerbers");
                });

            modelBuilder.Entity("GerberBackend.Core.Entities.Gerber.Elements.Layer", b =>
                {
                    b.Navigation("OrderGerbers");
                });

            modelBuilder.Entity("GerberBackend.Core.Entities.Gerber.Elements.MainSites", b =>
                {
                    b.Navigation("OrderGerbers");
                });

            modelBuilder.Entity("GerberBackend.Core.Entities.Gerber.Elements.MarkingColor", b =>
                {
                    b.Navigation("OrderGerbers");
                });

            modelBuilder.Entity("GerberBackend.Core.Entities.Gerber.Elements.MarkingSide", b =>
                {
                    b.Navigation("OrderGerbers");
                });

            modelBuilder.Entity("GerberBackend.Core.Entities.Gerber.Elements.MaskColor", b =>
                {
                    b.Navigation("OrderGerbers");
                });

            modelBuilder.Entity("GerberBackend.Core.Entities.Gerber.Elements.MaskSide", b =>
                {
                    b.Navigation("OrderGerbers");
                });

            modelBuilder.Entity("GerberBackend.Core.Entities.Gerber.Elements.MaskType", b =>
                {
                    b.Navigation("OrderGerbers");
                });

            modelBuilder.Entity("GerberBackend.Core.Entities.Gerber.Elements.MinimalConductor", b =>
                {
                    b.Navigation("OrderGerbers");
                });

            modelBuilder.Entity("GerberBackend.Core.Entities.Gerber.Elements.Vias", b =>
                {
                    b.Navigation("OrderGerbers");
                });
#pragma warning restore 612, 618
        }
    }
}
